{"ast":null,"code":"var _jsxFileName = \"A:\\\\Coder-house\\\\react\\\\proyecto final\\\\my-app\\\\src\\\\components\\\\Form\\\\Form.js\";\n\n/*import { addDoc, collection, serverTimestamp } from 'firebase/firestore';\r\nimport { useContext, useState } from 'react';\r\nimport { CartContext } from '../../Context/CartContext';\r\nimport { database } from '../../services/firebaseConfig';\r\n\r\nconst Form = () => {\r\n    const [name, setName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [orderId, setOrderId] = useState('');\r\n\r\n    const { cart, total, deleteAll } = useContext(CartContext);\r\n\r\n    const totalPrice = total();\r\n\r\n    const handleSubmit = (e) => {\r\n        setLoading(true);\r\n        e.preventDefault();\r\n        const order = {\r\n            buyer: { name, lastName },\r\n            items: cart,\r\n            total: totalPrice,\r\n            date: serverTimestamp(),\r\n        };\r\n\r\n        const ordersCollection = collection(database, 'orders');\r\n        addDoc(ordersCollection, order)\r\n            .then((res) => {\r\n                setOrderId(res.id);\r\n                deleteAll();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n            .finally(() => setLoading(false));\r\n    };\r\n\r\n    const handleChangeName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleChangeLastName = (e) => {\r\n        setLastName(e.target.value);\r\n    };\r\n\r\n    console.log(orderId);\r\n\r\n    if (orderId) {\r\n        return (\r\n            <h1>\r\n                Gracias por tu compra, tu n√∫mero de seguimiento es ${orderId}\r\n            </h1>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                minHeight: '70vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <form onSubmit={handleSubmit} action=\"\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"nombre\"\r\n                    placeholder=\"Nombre...\"\r\n                    onChange={handleChangeName}\r\n                    value={name}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"apellido\"\r\n                    placeholder=\"Apellido...\"\r\n                    onChange={handleChangeLastName}\r\n                    value={lastName}\r\n                />\r\n                <button>{loading ? 'Enviando...' : 'Enviar'}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;*/\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      age: null,\n      address: '',\n      phoneNo: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // Form submitting logic, prevent default page refresh \n\n\n  handleSubmit(event) {\n    const {\n      email,\n      name,\n      age,\n      address,\n      phoneNo\n    } = this.state;\n    event.preventDefault();\n    alert(`\n      ____Your Details____\\n\n      Email : ${email}\n      Name : ${name}\n      Age : ${age}\n      Address : ${address}\n      Phone No : ${phoneNo}\n    `);\n  } // Method causes to store all the values of the \n  // input field in react state single method handle \n  // input changes of all the input field using ES6 \n  // javascript feature computed property names\n\n\n  handleChange(event) {\n    this.setState({\n      // Computed property names\n      // keys of the objects are computed dynamically\n      [event.target.name]: event.target.value\n    });\n  } // Return a controlled form i.e. values of the \n  // input field not stored in DOM values are exist \n  // in react component itself as state\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          placeholder: \"Email\",\n          value: this.state.email,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"name\",\n          placeholder: \"Name\",\n          value: this.state.name,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"age\",\n          children: \"Age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"age\",\n          placeholder: \"Age\",\n          value: this.state.age,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"address\",\n          children: \"Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"address\",\n          placeholder: \"Address\",\n          value: this.state.address,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phoneNo\",\n          children: \"Phone Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"phoneNo\",\n          placeholder: \"Phone No\",\n          value: this.state.phoneNo,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;\n/*import {\r\n    addDoc,\r\n    collection,\r\n    documentId,\r\n    getDocs,\r\n    query,\r\n    serverTimestamp,\r\n    where,\r\n    writeBatch,\r\n} from 'firebase/firestore';\r\nimport { useContext, useState } from 'react';\r\nimport { CartContext } from '../../Context/CartContext';\r\nimport { database } from '../../services/firebaseConfig';\r\n\r\nconst Form = () => {\r\n    const [name, setName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [orderId, setOrderId] = useState('');\r\n\r\n    const { cart, total, deleteAll } = useContext(CartContext);\r\n\r\n    const totalPrice = total();\r\n\r\n    const handleSubmit = async (e) => {\r\n        setLoading(true);\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const order = {\r\n                buyer: { name, lastName },\r\n                items: cart,\r\n                total: totalPrice,\r\n                date: serverTimestamp(),\r\n            };\r\n\r\n            const ids = cart.map((prod) => prod.id);\r\n\r\n            const productsRef = collection(database, 'productos');\r\n\r\n            const productsAddedFromFirestore = await getDocs(\r\n                query(productsRef, where(documentId(), 'in', ids))\r\n            );\r\n\r\n            const { docs } = productsAddedFromFirestore;\r\n\r\n            const outOfStock = [];\r\n\r\n            const batch = writeBatch(database);\r\n\r\n            docs.forEach((doc) => {\r\n                const dataDoc = doc.data();\r\n                const stockDB = dataDoc.stock;\r\n\r\n                const productAddedToCart = cart.find(\r\n                    (prod) => prod.id === doc.id\r\n                );\r\n\r\n                const prodQuantity = productAddedToCart?.cantidad;\r\n\r\n                if (stockDB >= prodQuantity) {\r\n                    batch.update(doc.ref, { stock: stockDB - prodQuantity });\r\n                } else {\r\n                    outOfStock.push({ id: doc.id, ...dataDoc });\r\n                }\r\n            });\r\n\r\n            if (outOfStock.length === 0) {\r\n                batch.commit();\r\n\r\n                const orderRef = collection(database, 'orders');\r\n                const orderAdded = await addDoc(orderRef, order);\r\n                setOrderId(orderAdded.id);\r\n                deleteAll();\r\n            } else {\r\n                console.log('No hay stock de alg√∫n producto');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleChangeName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleChangeLastName = (e) => {\r\n        setLastName(e.target.value);\r\n    };\r\n\r\n    if (orderId) {\r\n        return (\r\n            <h1>\r\n                Gracias por tu compra, tu n√∫mero de seguimiento es ${orderId}\r\n            </h1>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                minHeight: '70vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <form onSubmit={handleSubmit} action=\"\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"nombre\"\r\n                    placeholder=\"Nombre...\"\r\n                    onChange={handleChangeName}\r\n                    value={name}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"apellido\"\r\n                    placeholder=\"Apellido...\"\r\n                    onChange={handleChangeLastName}\r\n                    value={lastName}\r\n                />\r\n                <button>{loading ? 'Enviando...' : 'Enviar'}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;*/","map":{"version":3,"names":["React","Component","Form","constructor","props","state","email","name","age","address","phoneNo","handleChange","bind","handleSubmit","event","preventDefault","alert","setState","target","value","render"],"sources":["A:/Coder-house/react/proyecto final/my-app/src/components/Form/Form.js"],"sourcesContent":["/*import { addDoc, collection, serverTimestamp } from 'firebase/firestore';\r\nimport { useContext, useState } from 'react';\r\nimport { CartContext } from '../../Context/CartContext';\r\nimport { database } from '../../services/firebaseConfig';\r\n\r\nconst Form = () => {\r\n    const [name, setName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [orderId, setOrderId] = useState('');\r\n\r\n    const { cart, total, deleteAll } = useContext(CartContext);\r\n\r\n    const totalPrice = total();\r\n\r\n    const handleSubmit = (e) => {\r\n        setLoading(true);\r\n        e.preventDefault();\r\n        const order = {\r\n            buyer: { name, lastName },\r\n            items: cart,\r\n            total: totalPrice,\r\n            date: serverTimestamp(),\r\n        };\r\n\r\n        const ordersCollection = collection(database, 'orders');\r\n        addDoc(ordersCollection, order)\r\n            .then((res) => {\r\n                setOrderId(res.id);\r\n                deleteAll();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n            .finally(() => setLoading(false));\r\n    };\r\n\r\n    const handleChangeName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleChangeLastName = (e) => {\r\n        setLastName(e.target.value);\r\n    };\r\n\r\n    console.log(orderId);\r\n\r\n    if (orderId) {\r\n        return (\r\n            <h1>\r\n                Gracias por tu compra, tu n√∫mero de seguimiento es ${orderId}\r\n            </h1>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                minHeight: '70vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <form onSubmit={handleSubmit} action=\"\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"nombre\"\r\n                    placeholder=\"Nombre...\"\r\n                    onChange={handleChangeName}\r\n                    value={name}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"apellido\"\r\n                    placeholder=\"Apellido...\"\r\n                    onChange={handleChangeLastName}\r\n                    value={lastName}\r\n                />\r\n                <button>{loading ? 'Enviando...' : 'Enviar'}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;*/\r\nimport React,{ Component } from 'react'\r\n  \r\nclass Form extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = { email:'',name:'', age:null, address:'',phoneNo:''}\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n  \r\n  // Form submitting logic, prevent default page refresh \r\n  handleSubmit(event){\r\n    const { email, name, age, address, phoneNo } = this.state\r\n    event.preventDefault()\r\n    alert(`\r\n      ____Your Details____\\n\r\n      Email : ${email}\r\n      Name : ${name}\r\n      Age : ${age}\r\n      Address : ${address}\r\n      Phone No : ${phoneNo}\r\n    `)\r\n  }\r\n  \r\n  // Method causes to store all the values of the \r\n  // input field in react state single method handle \r\n  // input changes of all the input field using ES6 \r\n  // javascript feature computed property names\r\n  handleChange(event){\r\n    this.setState({\r\n      // Computed property names\r\n      // keys of the objects are computed dynamically\r\n      [event.target.name] : event.target.value\r\n    })\r\n  }\r\n  \r\n  // Return a controlled form i.e. values of the \r\n  // input field not stored in DOM values are exist \r\n  // in react component itself as state\r\n  render(){\r\n    return(\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <label htmlFor='email'>Email</label>\r\n          <input \r\n            name='email'\r\n            placeholder='Email' \r\n            value = {this.state.email}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='name'>Name</label>\r\n          <input\r\n            name='name' \r\n            placeholder='Name'\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='age'>Age</label>\r\n          <input\r\n            name='age' \r\n            placeholder='Age'\r\n            value={this.state.age}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='address'>Address</label>\r\n          <input\r\n            name='address' \r\n            placeholder='Address'\r\n            value={this.state.address}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='phoneNo'>Phone Number</label>\r\n          <input\r\n            name='phoneNo' \r\n            placeholder='Phone No'\r\n            value={this.state.phoneNo}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button>Create Account</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n  \r\nexport default Form\r\n/*import {\r\n    addDoc,\r\n    collection,\r\n    documentId,\r\n    getDocs,\r\n    query,\r\n    serverTimestamp,\r\n    where,\r\n    writeBatch,\r\n} from 'firebase/firestore';\r\nimport { useContext, useState } from 'react';\r\nimport { CartContext } from '../../Context/CartContext';\r\nimport { database } from '../../services/firebaseConfig';\r\n\r\nconst Form = () => {\r\n    const [name, setName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [orderId, setOrderId] = useState('');\r\n\r\n    const { cart, total, deleteAll } = useContext(CartContext);\r\n\r\n    const totalPrice = total();\r\n\r\n    const handleSubmit = async (e) => {\r\n        setLoading(true);\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const order = {\r\n                buyer: { name, lastName },\r\n                items: cart,\r\n                total: totalPrice,\r\n                date: serverTimestamp(),\r\n            };\r\n\r\n            const ids = cart.map((prod) => prod.id);\r\n\r\n            const productsRef = collection(database, 'productos');\r\n\r\n            const productsAddedFromFirestore = await getDocs(\r\n                query(productsRef, where(documentId(), 'in', ids))\r\n            );\r\n\r\n            const { docs } = productsAddedFromFirestore;\r\n\r\n            const outOfStock = [];\r\n\r\n            const batch = writeBatch(database);\r\n\r\n            docs.forEach((doc) => {\r\n                const dataDoc = doc.data();\r\n                const stockDB = dataDoc.stock;\r\n\r\n                const productAddedToCart = cart.find(\r\n                    (prod) => prod.id === doc.id\r\n                );\r\n\r\n                const prodQuantity = productAddedToCart?.cantidad;\r\n\r\n                if (stockDB >= prodQuantity) {\r\n                    batch.update(doc.ref, { stock: stockDB - prodQuantity });\r\n                } else {\r\n                    outOfStock.push({ id: doc.id, ...dataDoc });\r\n                }\r\n            });\r\n\r\n            if (outOfStock.length === 0) {\r\n                batch.commit();\r\n\r\n                const orderRef = collection(database, 'orders');\r\n                const orderAdded = await addDoc(orderRef, order);\r\n                setOrderId(orderAdded.id);\r\n                deleteAll();\r\n            } else {\r\n                console.log('No hay stock de alg√∫n producto');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleChangeName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleChangeLastName = (e) => {\r\n        setLastName(e.target.value);\r\n    };\r\n\r\n    if (orderId) {\r\n        return (\r\n            <h1>\r\n                Gracias por tu compra, tu n√∫mero de seguimiento es ${orderId}\r\n            </h1>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                minHeight: '70vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <form onSubmit={handleSubmit} action=\"\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"nombre\"\r\n                    placeholder=\"Nombre...\"\r\n                    onChange={handleChangeName}\r\n                    value={name}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"apellido\"\r\n                    placeholder=\"Apellido...\"\r\n                    onChange={handleChangeLastName}\r\n                    value={lastName}\r\n                />\r\n                <button>{loading ? 'Enviando...' : 'Enviar'}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;*/"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;EAC1BE,WAAW,CAACC,KAAD,EAAO;IAChB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MAAEC,KAAK,EAAC,EAAR;MAAWC,IAAI,EAAC,EAAhB;MAAoBC,GAAG,EAAC,IAAxB;MAA8BC,OAAO,EAAC,EAAtC;MAAyCC,OAAO,EAAC;IAAjD,CAAb;IACA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;IACA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;EACD,CANyB,CAQ1B;;;EACAC,YAAY,CAACC,KAAD,EAAO;IACjB,MAAM;MAAER,KAAF;MAASC,IAAT;MAAeC,GAAf;MAAoBC,OAApB;MAA6BC;IAA7B,IAAyC,KAAKL,KAApD;IACAS,KAAK,CAACC,cAAN;IACAC,KAAK,CAAE;AACX;AACA,gBAAgBV,KAAM;AACtB,eAAeC,IAAK;AACpB,cAAcC,GAAI;AAClB,kBAAkBC,OAAQ;AAC1B,mBAAmBC,OAAQ;AAC3B,KAPS,CAAL;EAQD,CApByB,CAsB1B;EACA;EACA;EACA;;;EACAC,YAAY,CAACG,KAAD,EAAO;IACjB,KAAKG,QAAL,CAAc;MACZ;MACA;MACA,CAACH,KAAK,CAACI,MAAN,CAAaX,IAAd,GAAsBO,KAAK,CAACI,MAAN,CAAaC;IAHvB,CAAd;EAKD,CAhCyB,CAkC1B;EACA;EACA;;;EACAC,MAAM,GAAE;IACN,oBACE;MAAM,QAAQ,EAAE,KAAKP,YAArB;MAAA,wBACE;QAAA,wBACE;UAAO,OAAO,EAAC,OAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,OADP;UAEE,WAAW,EAAC,OAFd;UAGE,KAAK,EAAI,KAAKR,KAAL,CAAWC,KAHtB;UAIE,QAAQ,EAAE,KAAKK;QAJjB;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAUE;QAAA,wBACE;UAAO,OAAO,EAAC,MAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,WAAW,EAAC,MAFd;UAGE,KAAK,EAAE,KAAKN,KAAL,CAAWE,IAHpB;UAIE,QAAQ,EAAE,KAAKI;QAJjB;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF,eAmBE;QAAA,wBACE;UAAO,OAAO,EAAC,KAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,KADP;UAEE,WAAW,EAAC,KAFd;UAGE,KAAK,EAAE,KAAKN,KAAL,CAAWG,GAHpB;UAIE,QAAQ,EAAE,KAAKG;QAJjB;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAnBF,eA4BE;QAAA,wBACE;UAAO,OAAO,EAAC,SAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,SADP;UAEE,WAAW,EAAC,SAFd;UAGE,KAAK,EAAE,KAAKN,KAAL,CAAWI,OAHpB;UAIE,QAAQ,EAAE,KAAKE;QAJjB;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QA5BF,eAqCE;QAAA,wBACE;UAAO,OAAO,EAAC,SAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,SADP;UAEE,WAAW,EAAC,UAFd;UAGE,KAAK,EAAE,KAAKN,KAAL,CAAWK,OAHpB;UAIE,QAAQ,EAAE,KAAKC;QAJjB;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QArCF,eA8CE;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QA9CF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAoDD;;AA1FyB;;AA6F5B,eAAeT,IAAf},"metadata":{},"sourceType":"module"}